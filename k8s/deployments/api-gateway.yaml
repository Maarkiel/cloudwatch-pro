apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: cloudwatch-pro
  labels:
    app: cloudwatch-pro
    component: api-gateway
    tier: gateway
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: cloudwatch-pro
      component: api-gateway
  template:
    metadata:
      labels:
        app: cloudwatch-pro
        component: api-gateway
        tier: gateway
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: api-gateway
        image: cloudwatch-pro/api-gateway:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: cloudwatch-pro-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: cloudwatch-pro-config
              key: REDIS_PORT
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: cloudwatch-pro-secrets
              key: SECRET_KEY
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: cloudwatch-pro-config
              key: LOG_LEVEL
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: cloudwatch-pro-config
              key: ENVIRONMENT
        - name: RATE_LIMIT_REQUESTS
          valueFrom:
            configMapKeyRef:
              name: cloudwatch-pro-config
              key: RATE_LIMIT_REQUESTS
        - name: RATE_LIMIT_WINDOW
          valueFrom:
            configMapKeyRef:
              name: cloudwatch-pro-config
              key: RATE_LIMIT_WINDOW
        - name: USER_SERVICE_URL
          value: "http://user-service:8001"
        - name: METRICS_SERVICE_URL
          value: "http://metrics-collector-service:8002"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: cloudwatch-pro
  labels:
    app: cloudwatch-pro
    component: api-gateway
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: cloudwatch-pro
    component: api-gateway
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: api-gateway-hpa
  namespace: cloudwatch-pro
  labels:
    app: cloudwatch-pro
    component: api-gateway
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: api-gateway
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

