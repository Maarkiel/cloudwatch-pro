apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cloudwatch-pro-ingress
  namespace: cloudwatch-pro
  labels:
    app: cloudwatch-pro
  annotations:
    # NGINX Ingress Controller annotations
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    
    # WebSocket support
    nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header Referrer-Policy "no-referrer-when-downgrade" always;
      add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Load balancing
    nginx.ingress.kubernetes.io/upstream-hash-by: "$remote_addr"
    
    # Certificate management (cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - cloudwatch-pro.example.com
    - api.cloudwatch-pro.example.com
    secretName: cloudwatch-pro-tls
  rules:
  # Frontend (Dashboard)
  - host: cloudwatch-pro.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: dashboard-service
            port:
              number: 80
  
  # API Gateway
  - host: api.cloudwatch-pro.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: api-gateway-service
            port:
              number: 8000
  
  # Alternative API access through main domain
  - host: cloudwatch-pro.example.com
    http:
      paths:
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-gateway-service
            port:
              number: 8000
      - path: /ws
        pathType: Prefix
        backend:
          service:
            name: api-gateway-service
            port:
              number: 8000
---
# Ingress for monitoring tools (Grafana, Prometheus)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: cloudwatch-pro-monitoring-ingress
  namespace: cloudwatch-pro-monitoring
  labels:
    app: cloudwatch-pro
    component: monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    
    # Basic auth for monitoring tools
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: monitoring-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - CloudWatch Pro Monitoring'
    
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - grafana.cloudwatch-pro.example.com
    - prometheus.cloudwatch-pro.example.com
    secretName: cloudwatch-pro-monitoring-tls
  rules:
  # Grafana
  - host: grafana.cloudwatch-pro.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: grafana-service
            port:
              number: 3000
  
  # Prometheus
  - host: prometheus.cloudwatch-pro.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090
---
# Network Policy for Ingress
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: cloudwatch-pro-ingress-policy
  namespace: cloudwatch-pro
spec:
  podSelector:
    matchLabels:
      app: cloudwatch-pro
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
    - protocol: TCP
      port: 80
  - from:
    - namespaceSelector:
        matchLabels:
          name: cloudwatch-pro
    - namespaceSelector:
        matchLabels:
          name: cloudwatch-pro-monitoring
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: cloudwatch-pro
  - to:
    - namespaceSelector:
        matchLabels:
          name: cloudwatch-pro-monitoring
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80

